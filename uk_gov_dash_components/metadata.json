{
  "src/lib/components/AutoComplete.react.js": {
    "description": "Lazy loaded Autocomplete\r\n\n@param {\r\n\tid,\r\n\tautoselect,\r\n\tcssNamespace,\r\n\tdefaultValue,\r\n\tdisplayMenu,\r\n\tminLength,\r\n\tname,\r\n\tplaceholder,\r\n\tonConfirm,\r\n\tconfirmOnBlur,\r\n\tshowNoOptionsFound,\r\n\tshowAllValues,\r\n\trequired,\r\n\ttNoResults,\r\n\ttAssistiveHint,\r\n\tsource,\r\n\ttemplates,\r\n\tdropdownArrow: dropdownArrowFactory,\r\n\ttStatusQueryTooShort,\r\n\ttStatusNoResults,\r\n\ttStatusSelectedOption,\r\n\ttStatusResults,\r\n\tstyle,\r\n} [props={}]\r\n@return {*}",
    "displayName": "AutoComplete",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoselect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should auto select",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "cssNamespace": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "cssNamespace",
        "defaultValue": {
          "value": "'autocomplete'",
          "computed": false
        }
      },
      "displayMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "'inline'",
          "computed": false
        }
      },
      "minLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "'input-autocomplete'",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "onConfirm": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "() => { }",
          "computed": false
        }
      },
      "confirmOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showNoOptionsFound": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showAllValues": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "tNoResults": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "() => 'No results found'",
          "computed": false
        }
      },
      "tAssistiveHint": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description",
        "defaultValue": {
          "value": "() => 'When autocomplete results are available use up and down arrows to review and enter to select.  Touch device users, explore by touch or with swipe gestures.'",
          "computed": false
        }
      },
      "source": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "templates": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusQueryTooShort": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusNoResults": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusSelectedOption": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusResults": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "dropdownArrow": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "React component for dropdown arrow",
        "defaultValue": {
          "value": "DropdownArrowDown",
          "computed": true
        }
      },
      "selectElement": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Accessible element"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      },
      "alwaysDisplayArrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "alwaysDisplayArrow",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrapperRef": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "wrapperRef"
      },
      "style": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Override the css style of the wrapper"
      },
      "ariaLabelledBy": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This is the ID for the label field"
      }
    }
  },
  "src/lib/components/CheckboxList.react.js": {
    "description": "Lazy loaded CheckboxList\r\n\n@param {\r\n\tid,\r\n\toptions,\r\n\tvalue,\r\n} [props={}]\r\n@return {*}",
    "displayName": "CheckboxList",
    "methods": [],
    "props": {
      "options": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              },
              "description": "Array of options where the label and the value are the same thing - [string|number|bool]"
            },
            {
              "name": "object",
              "description": "Simpler `options` representation in dictionary format. The order is not guaranteed.\r\n{`value1`: `label1`, `value2`: `label2`, ... }\r\nwhich is equal to\r\n[{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "exact",
                "value": {
                  "label": {
                    "name": "node",
                    "description": "The option's label",
                    "required": true
                  },
                  "value": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      },
                      {
                        "name": "bool"
                      }
                    ],
                    "description": "The value of the option. This value\r\ncorresponds to the items specified in the\r\n`value` property.",
                    "required": true
                  },
                  "disabled": {
                    "name": "bool",
                    "description": "If true, this option is disabled and cannot be selected.",
                    "required": false
                  },
                  "title": {
                    "name": "string",
                    "description": "The HTML 'title' attribute for the option. Allows for\r\ninformation on hover. For more information on this attribute,\r\nsee https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title",
                    "required": false
                  }
                }
              },
              "description": "An array of options {label: [string|number], value: [string|number]},\r\nan optional disabled field can be used for each option"
            }
          ]
        },
        "required": false,
        "description": "An array of options",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              },
              {
                "name": "bool"
              }
            ]
          }
        },
        "required": false,
        "description": "The currently selected value",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\r\nin callbacks. The ID needs to be unique across all of the\r\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/ComponentTemplate.react.js": {
    "description": "Lazy loaded ComponentTemplate\r\n\n@param {\r\n\tid,\r\n} [props={}]\r\n@return {*}",
    "displayName": "ComponentTemplate",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\r\nin callbacks. The ID needs to be unique across all of the\r\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/Dropdown.react.js": {
    "description": "@param {{\r\n\tlabel: string,\r\n\tid,\r\n\tautoselect,\r\n\tcssNamespace,\r\n\tvalue,\r\n\tminLength,\r\n\tname,\r\n\tplaceholder,\r\n\tonConfirm,\r\n\tconfirmOnBlur,\r\n\tshowNoOptionsFound,\r\n\trequired,\r\n\ttNoResults,\r\n\ttAssistiveHint,\r\n\tsource,\r\n\ttemplates,\r\n\tdropdownArrow: dropdownArrowFactory,\r\n\ttStatusQueryTooShort,\r\n\ttStatusNoResults,\r\n\ttStatusSelectedOption,\r\n\ttStatusResults,\r\n}} [props={}]\r\n\n@return {*}",
    "displayName": "Dropdown",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label text"
      },
      "autoselect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should auto select"
      },
      "cssNamespace": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "cssNamespace"
      },
      "minLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "No Description"
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "No Description"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "No Description"
      },
      "onConfirm": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "confirmOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description"
      },
      "showNoOptionsFound": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "No Description"
      },
      "tNoResults": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "tAssistiveHint": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "source": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "templates": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusQueryTooShort": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusNoResults": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusSelectedOption": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "No Description"
      },
      "tStatusResults": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "No Description"
      },
      "dropdownArrow": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "React component for dropdown arrow"
      },
      "selectElement": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Accessible element"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      },
      "wrapperRef": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "wrapperRef"
      },
      "style": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Override the css style of the wrapper"
      }
    }
  },
  "src/lib/components/dropdownArrowDown.react.js": {
    "description": "Default dropdown arrow\r\n\n@param {string} { className }",
    "displayName": "DropdownArrowDown",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name to add to SVG"
      }
    }
  },
  "src/lib/components/status.js": {
    "description": "Display ststus\r\n\n@export\r\n@class Status\r\n@extends {Component}",
    "displayName": "Status",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "length": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "length"
      },
      "minQueryLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "min Query Length"
      },
      "queryLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Query Length"
      },
      "selectedOption": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Selected option"
      },
      "selectedOptionIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Selected Option Index"
      },
      "tQueryTooShort": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "tQueryTooShort",
        "defaultValue": {
          "value": "(minQueryLength) => `Type in ${minQueryLength} or more characters for results`",
          "computed": false
        }
      },
      "tNoResults": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "tNoResults",
        "defaultValue": {
          "value": "() => 'No search results'",
          "computed": false
        }
      },
      "tSelectedOption": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "tSelectedOption",
        "defaultValue": {
          "value": "(selectedOption, length, index) => `${selectedOption} ${index + 1} of ${length} is highlighted`",
          "computed": false
        }
      },
      "tResults": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "tResults",
        "defaultValue": {
          "value": "(length, contentSelectedOption) => {\r\n    const words = {\r\n        result: (length === 1) ? 'result' : 'results',\r\n        is: (length === 1) ? 'is' : 'are'\r\n    }\r\n\r\n    return `${length} ${words.result} ${words.is} available. ${contentSelectedOption}`\r\n}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Team2.react.js": {
    "description": "Lazy loaded ComponentTemplate\r\n\n@param {\r\n\tid,\r\n} [props={}]\r\n@return {*}",
    "displayName": "Team2",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\r\nin callbacks. The ID needs to be unique across all of the\r\ncomponents in an app."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/ui/ComboBox.react.js": {
    "description": "",
    "displayName": "ComboBox",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "defaultInputValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "defaultItems": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "items": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "custom",
                "raw": "{\r\n    key: PropTypes.String,\r\n    name: PropTypes.string,\r\n}"
              }
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "custom",
                "raw": "{\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    name: PropTypes.string,\r\n}"
              }
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "allowsCustomValue": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "onInputChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "selectedKey": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "menuTrigger": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/ui/ListBox.react.js": {
    "description": "Listbox\r\n\n@param {*} [props={}]\r\n@return {*}",
    "displayName": "ListBox",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      }
    }
  },
  "src/lib/components/ui/Popover.react.js": {
    "description": "Propover\r\n\n@export\r\n@param {*} props\r\n@return {*}",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      }
    }
  },
  "src/lib/components/UkGovDashComponents.react.js": {
    "description": "ExampleComponent is an example component.\r\nIt takes a property, `label`, and\r\ndisplays it.\r\nIt renders an input with the property `value`\r\nwhich is editable by the user.",
    "displayName": "UkGovDashComponents",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\r\nto Dash, to make them available for callbacks."
      }
    }
  }
}